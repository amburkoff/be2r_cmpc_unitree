#!/usr/bin/env python
PACKAGE = 'be2r_cmpc_unitree'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

common = gen.add_group("common", type="tab")
common.add("use_wbc", bool_t, 0, "Use WBC",  True)
common.add("joint_limits", bool_t, 0, "Switch joint limits ON/OFF",  False)

fsm_state_enum = gen.enum([ gen.const("Passive",        int_t, 0, "Do nothing"),
                            gen.const("MPC_Locomotion", int_t, 4, "Main locomotion state"),
                            gen.const("Balace_Stand",   int_t, 3, "Balance on 4 legs"),
                            gen.const("Balance_VBL",    int_t, 2, "Balance on 2 legs"),
                            gen.const("Stand_Up",       int_t, 1, "Stand up from groud"),
                            gen.const("Lay_Down",       int_t, 7, "Lay down to groud"),
                            # gen.const("VisionMPC",      int_t, 8, "Vision based locomotion"),
                            gen.const("Testing",        int_t, 12, "Testing state"),
                            # gen.const("BackFlip",       int_t, 9, "BackFlip"),
                            gen.const("Recovery",       int_t, 6, "Recovery state"),
                            gen.const("TestingCV",       int_t, 14, "Testing + CV"),
                            ],"Set finite state machine state")
common.add("FSM_State", int_t, 0, "Set finite state machine state", 0, 0, 14, edit_method=fsm_state_enum)
common.add('test', int_t, 0, "Switch test mode", 0, 0, 10)

cmpc_gait_enum = gen.enum([ gen.const("Trotting",           int_t, 9, "Trot gait"),
                            gen.const("Standing",           int_t, 4, "Standing gait"),
                            # gen.const("Pronking",           int_t, 2, "Balance on 4 legs"),
                            # gen.const("Jumping",            int_t, 3, "Stand up from groud"),
                            # gen.const("Galloping",          int_t, 6, "Lay down to groud"),
                            # gen.const("Bounding",           int_t, 1, "Vision based locomotion"),
                            # gen.const("Trot_Running",       int_t, 5, "Testing state"),
                            gen.const("Give_Hand",            int_t, 11, "Give a hand"),
                            gen.const("Walking",            int_t, 10, "Recovery state"),
                            # gen.const("Walking2",           int_t, 11, "Recovery state"),
                            # gen.const("Pacing",             int_t, 8, "Recovery state"),
                            # gen.const("Flying_trot",        int_t, 7, "Recovery state"),
                            gen.const("Test",               int_t, 13, "Test gait"),
                            gen.const("Trot_long",          int_t, 15, "Recovery state"),
                          ],"Set gait type to cMPC gait sheduler")

common.add("cmpc_gait", int_t, 0, "Set gait type to cMPC gait sheduler", 9, 0, 15, edit_method=cmpc_gait_enum)
common.add('body_height',    double_t, 0.1, "body_height", 0.29, 0, 0.6)
common.add('Swing_traj_height', double_t, 0, "Swing_traj_height", 0.09, 0, 0.3)

#                            MPC
mpc = gen.add_group("MPC gains", type="tab")

mpc.add('Kp_cartesian_0', int_t, 0, "proportional gain", 150, 0, 1000)
mpc.add('Kp_cartesian_1', int_t, 0, "proportional gain", 150, 0, 1000)
mpc.add('Kp_cartesian_2', int_t, 0, "proportional gain", 150, 0, 1000)
mpc.add('Kd_cartesian_0', int_t, 0, "differential gain", 3, 0, 100)
mpc.add('Kd_cartesian_1', int_t, 0, "differential gain", 3, 0, 100)
mpc.add('Kd_cartesian_2', int_t, 0, "differential gain", 3, 0, 100)
#                            MPC

#                            WBC
wbc = gen.add_group("WBC gains", type="tab")

wbc.add('Kp_joint_0', double_t, 0, "Kp_joint_0 gain", 3, 0, 100)
wbc.add('Kp_joint_1', double_t, 0, "Kp_joint_1 gain", 3, 0, 100)
wbc.add('Kp_joint_2', double_t, 0, "Kp_joint_2 gain", 3, 0, 100)

wbc.add('Kd_joint_0', double_t, 0, "Kd_joint_0 gain", 1,   0, 50)
wbc.add('Kd_joint_1', double_t, 0, "Kd_joint_1 gain", 0.2, 0, 50)
wbc.add('Kd_joint_2', double_t, 0, "Kd_joint_2 gain", 0.2, 0, 50)

wbc.add('Kp_ori_0', double_t, 0, "Kp_ori_0 gain", 100, 0, 1000)
wbc.add('Kp_ori_1', double_t, 0, "Kp_ori_1 gain", 100, 0, 1000)
wbc.add('Kp_ori_2', double_t, 0, "Kp_ori_2 gain", 100, 0, 1000)

wbc.add('Kd_ori_0', double_t, 0, "Kd_ori_0 gain", 10, 0, 500)
wbc.add('Kd_ori_1', double_t, 0, "Kd_ori_1 gain", 10, 0, 500)
wbc.add('Kd_ori_2', double_t, 0, "Kd_ori_2 gain", 10, 0, 500)

wbc.add('Kp_body_0', double_t, 0, "Kp_body_0 gain", 100, 0, 1000)
wbc.add('Kp_body_1', double_t, 0, "Kp_body_1 gain", 100, 0, 1000)
wbc.add('Kp_body_2', double_t, 0, "Kp_body_2 gain", 100, 0, 1000)

wbc.add('Kd_body_0', double_t, 0, "Kd_body_0 gain", 10, 0, 500)
wbc.add('Kd_body_1', double_t, 0, "Kd_body_1 gain", 10, 0, 500)
wbc.add('Kd_body_2', double_t, 0, "Kd_body_2 gain", 10, 0, 500)

wbc.add('Kp_foot_0', double_t, 0, "Kp_foot_0 gain", 500, 0, 1000)
wbc.add('Kp_foot_1', double_t, 0, "Kp_foot_1 gain", 500, 0, 1000)
wbc.add('Kp_foot_2', double_t, 0, "Kp_foot_2 gain", 500, 0, 1000)

wbc.add('Kd_foot_0', double_t, 0, "Kd_foot_0 gain", 10, 0, 500)
wbc.add('Kd_foot_1', double_t, 0, "Kd_foot_1 gain", 10, 0, 500)
wbc.add('Kd_foot_2', double_t, 0, "Kd_foot_2 gain", 10, 0, 500)
#                            WBC


static = gen.add_group("other", type="tab")

static.add('cmpc_x_drag',       int_t,    0, "cmpc_x_drag", 3, 0, 10)
static.add('cmpc_use_sparse',   bool_t,   0, "cmpc_use_sparse", False)
static.add('cmpc_bonus_swing',  double_t, 0, "cmpc_bonus_swing", 0.0, 0, 3)
static.add('stance_legs',       int_t,    0, "stance_legs", 4, 0, 8)

static.add('jcqp_alpha',      double_t, 0, "jcqp_alpha",      1.5,    0, 3)
static.add('jcqp_max_iter',   int_t,    0, "jcqp_max_iter",   10000,  0, 3)
static.add('jcqp_rho',        double_t, 0, "jcqp_rho",        1e-07,    0, 1e-03)
static.add('jcqp_sigma',      double_t, 0, "jcqp_sigma",      1e-08,    0, 1e-03)
static.add('jcqp_terminate',  double_t, 0, "jcqp_terminate",  0.1,    0, 1)
static.add('use_jcqp',        bool_t,   0, "use_jcqp", True)

static.add('gait_type',             int_t,    0, "gait_type",               4,      0, 8)
static.add('gait_period_time',      double_t, 0, "gait_period_time",        0.5,    0, 1)
static.add('gait_period',           int_t,    0, "gait_period",             16,    10, 5000)
static.add('gait_switching_phase',  double_t, 0, "gait_switching_phase",    0.5,    0, 1)
static.add('gait_override',         int_t,    0, "gait_override",           4,      0, 8)


#example
#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
#gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

exit(gen.generate(PACKAGE, "be2r_cmpc_unitree", "ros_dynamic_params"))
